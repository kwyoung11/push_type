- unless @node.trashed?
  = f.hidden_field :status, value: '{{ node.status }}', class: "node-status"
  
  - if @node.status == "draft"
    %a.button.radius{ :class => 'primary', :'v-node-submit' => true}
      = ficon :check, "{{draftButtonText}}"

  - if @node.status == "draft" || @node.status == "published"
    %a.button.radius{ :class => 'success', :'v-node-submit' => true}
      = ficon :check, "{{publishButtonText}}"

  - if @node.persisted? && @node.exposed?
    .text-button.secondary
      = link_to "Preview #{@node.type.underscore.humanize.downcase}", main_app.preview_node_path(@node.base64_id), target: '_blank'
  - unless @node.new_record?
    .text-button.alert
      = link_to "Delete #{@node.type.underscore.humanize.downcase}", push_type_admin.node_path(@node), method: 'delete', data: { confirm: { body: 'Deleted content, and all its child content, will be moved to the trash. You can restore trashed content later.' } }

- else
  %button.button.radius.secondary= ficon :check, 'Save as trash'
  .text-button.success
    - if @node.orphan?
      %span Orphan. Cannot be restored.
    - else
      = link_to "Restore #{ @node.type.underscore.humanize.downcase }", push_type_admin.restore_node_path(@node), method: 'put'
  .text-button.alert
    = link_to "Permanently delete #{ @node.type.underscore.humanize.downcase }", push_type_admin.node_path(@node), method: 'delete', data: { confirm: { body: 'This action cannot be undone. All child content will also be permanently deleted.' } }